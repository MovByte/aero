import { writeFileSync } from "node:fs";

import { default as createDefaultFeatureFlags_ } from "../createDefaultFeatureFlags";
import featureFlagsBuilder from "../featureFlagsBuilder";

import type { Result } from "neverthrow";
import { err as nErr, ok } from "neverthrow";

export default function initGlobalsTs(
	output: "../types/dist/globals.d.ts",
	createDefaultFeatureFlags = createDefaultFeatureFlags_,
): Result<void, Error> {
	const featureFlags = featureFlagsBuilder(createDefaultFeatureFlags({
		debugMode: true,
	}));

	const lines: string[] = ["declare global {"];
	for (const [featureFlag, val] of Object.entries(featureFlags)) {
		try {
			// @ts-ignore: it could be anything. There is a try statement if something goes wrong anyways
			const valType = typeof JSON.parse(val);
			if (valType === "number" || valType === "string") {
				lines.push(`\tconst ${featureFlag}: ${valType};`);
			} else {
				return nErr(
					new SyntaxError(
						`Unexpected type for feature flag, ${featureFlag}, ${valType}`,
					),
				);
			}
		} catch (err) {
			return nErr(err);
		}
	}
	lines.push("}");

	writeFileSync(
		output,
		`// Autogenerated by \`initGlobalsTs.ts\`\n${lines.join("\n")}`,
		{
			flag: "w",
		},
	);

	// @ts-ignore
	return ok();
}
