import path from "node:path";
import { access, mkdir } from "node:fs/promises";
import { writeFileSync } from "node:fs";

// For WebIDL -> TS conversion
// I shouldn't have to do this, but they forgot to include the "exports" definition inside their package.json, and I don't want to maintain a fork. They also defined exports for these modules in their index.js, which should be enough by itself, but they invoked the CLI, making this useless since that action throws an error.
const fetchIDLModPath = path.resolve(
	__dirname,
	"..",
	"node_modules",
	"@milkshakeio",
	"webidl2ts",
	"dist",
	"fetch-idl.js"
);
const fetchIDLMod = require(fetchIDLModPath);
const fetchIDL = fetchIDLMod.fetchIDL;
const parseIDLModPath = path.resolve(
	__dirname,
	"..",
	"node_modules",
	"@milkshakeio",
	"webidl2ts",
	"dist",
	"parse-idl.js"
);
const parseIDLMod = require(parseIDLModPath);
const parseIDL = parseIDLMod.parseIDL;
const convertIDLModPath = path.resolve(
	__dirname,
	"..",
	"node_modules",
	"@milkshakeio",
	"webidl2ts",
	"dist",
	"convert-idl.js"
);
const convertIDLMod = require(convertIDLModPath);
const convertIDL = convertIDLMod.convertIDL;
const printTsModPath = path.resolve(
	__dirname,
	"..",
	"node_modules",
	"@milkshakeio",
	"webidl2ts",
	"dist",
	"print-ts.js"
);
const printTsMod = require(printTsModPath);
const printTs = printTsMod.printTs;

const webIDLOutputDir = path.resolve(__dirname, "types/webidlDist");

type webIDLDescs = { [key: string]: string };
const webIDLUsedInAero: webIDLDescs = {
	"cookie-store": "https://wicg.github.io/cookie-store/",
	// fedcm: "https://fedidcg.github.io/FedCM/", FIXME: Broken
	"shared-storage": "https://wicg.github.io/shared-storage/",
	"web-app-launch": "https://wicg.github.io/web-app-launch/",
	"web-otp": "https://wicg.github.io/web-otp/"
};

// Gens to types/webidlDist
export default function genWebIDL(
	logStatus: boolean,
	webIDL = webIDLUsedInAero
) {
	if (logStatus)
		console.log(
			"\nGenerating the WebIDL -> TS conversions required in aero"
		);
	access(webIDLOutputDir).catch(() => mkdir(webIDLOutputDir));
	for (const [apiName, apiDocURL] of Object.entries(webIDL)) {
		if (logStatus)
			console.log(
				`Fetching the WebIDL for ${apiName} with URL ${apiDocURL}`
			);
		fetchIDL(apiDocURL).then(rawIdl => {
			if (logStatus) console.log(`Parsing the WebIDL for ${apiName}`);
			parseIDL(rawIdl).then(idl => {
				if (logStatus)
					console.log(`Converting the WebIDL -> TS for ${apiName}`);
				const ts = convertIDL(idl, {
					emscripten: false
				});

				if (logStatus)
					console.log(`Applying the final touches to ${apiName}`);
				const tsString = printTs(ts);

				// Parity check: if the string is blank
				if (tsString === "") {
					const errMsg = "The ts string is invalid";
					if (!debugMode) console.warn(`⚠️ ${errMsg}`);
					else throw new Error(errMsg);
				}

				if (logStatus) console.log(`Writing the WebIDL for ${apiName}`);
				writeFileSync(
					path.resolve(webIDLOutputDir, `${apiName}.d.ts`),
					`// Auto-generated by webidl2ts - ${apiDocURL}\n${tsString}`
				);
			});
		});
	}
}

if (require.main === module) {
	genWebIDL(webIDLUsedInAero, true);
}
